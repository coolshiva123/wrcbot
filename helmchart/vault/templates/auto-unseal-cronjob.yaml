apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "vault.fullname" . }}-auto-unseal
  labels:
    {{- include "vault.labels" . | nindent 4 }}
spec:
  schedule: "*/1 * * * *"  # Check every minute
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: vault-unsealer
            image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
            env:
            - name: VAULT_ADDR
              value: "http://{{ include "vault.fullname" . }}:{{ .Values.service.port }}"
            command:
            - /bin/sh
            - -c
            - |
              # Check if vault-keys secret exists
              if kubectl get secret vault-keys -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                # Get unseal key from secret
                UNSEAL_KEY=$(kubectl get secret vault-keys -n {{ .Release.Namespace }} -o jsonpath='{.data.unseal-key}' | base64 -d)
                
                # Check if Vault needs unsealing
                if vault status 2>/dev/null | grep -q "Sealed.*true"; then
                  echo "$(date): Vault is sealed, attempting to unseal..."
                  vault operator unseal "$UNSEAL_KEY" && echo "$(date): Vault unsealed successfully"
                else
                  echo "$(date): Vault is already unsealed or not ready"
                fi
              else
                echo "$(date): No vault-keys secret found, skipping auto-unseal"
              fi
          serviceAccountName: {{ include "vault.fullname" . }}-init
