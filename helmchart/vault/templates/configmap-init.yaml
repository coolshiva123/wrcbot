apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-init-script
data:
  init.sh: |
    #!/bin/sh
    set -e

    # Wait for Vault to be ready
    until vault status > /dev/null 2>&1; do
      echo "Waiting for Vault to be ready..."
      sleep 5
    done

    # Check if Vault is unsealed
    until vault status 2>/dev/null | grep -q "Sealed.*false"; do
      echo "Waiting for Vault to be unsealed..."
      sleep 5
    done

    echo "Vault is unsealed. Configuring auth methods..."

    # Enable kubernetes auth method if not already enabled
    vault auth list | grep -q '^kubernetes/' || {
      echo "Enabling Kubernetes auth method..."
      vault auth enable kubernetes
    }

    # Get service account token and CA cert
    TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
    cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt > /tmp/k8s-ca.crt

    # Configure Kubernetes auth
    echo "Configuring Kubernetes auth..."
    vault write auth/kubernetes/config \
      kubernetes_host="https://kubernetes.default.svc.cluster.local:443" \
      kubernetes_ca_cert=@/tmp/k8s-ca.crt \
      token_reviewer_jwt="$TOKEN" \
      disable_local_ca_jwt=false

    # Create or update the policy
    echo "Configuring Vault policy..."
    cat << EOF | vault policy write wrcbot-policy -
    path "secret/data/wrcbot/config" {
      capabilities = ["read"]
    }
    EOF

    # Create or update the role
    echo "Configuring Kubernetes auth role..."
    vault write auth/kubernetes/role/wrcbot-role \
      bound_service_account_names=wrcbot-sa \
      bound_service_account_namespaces=wrcbot \
      policies=wrcbot-policy \
      ttl=1h

    echo "Vault configuration completed successfully!"
