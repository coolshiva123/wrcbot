apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "vault.fullname" . }}
  labels:
    {{- include "vault.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "vault.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "vault.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: vault-sa
      securityContext:
        fsGroup: 100
      initContainers:
      - name: vault-storage-init
        image: busybox
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
        command:
        - /bin/sh
        - -c
        - |
          chown -R 100:100 /vault/file
          chmod 750 /vault/file
        volumeMounts:
        - name: vault-storage
          mountPath: /vault/file
      - name: vault-tools-init
        image: bitnami/kubectl
        command:
        - /bin/sh
        - -c
        - |
          # Create directory structure
          mkdir -p /tools/usr/local/bin
          
          # Install kubectl
          cp /opt/bitnami/kubectl/bin/kubectl /tools/usr/local/bin/
          
          # Install jq
          apt-get update
          apt-get install -y jq
          cp $(which jq) /tools/usr/local/bin/
          
          # Ensure executables have correct permissions
          chmod +x /tools/usr/local/bin/*
        volumeMounts:
        - name: tools-bin
          mountPath: /tools
      - name: vault-config-init
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        securityContext:
          runAsNonRoot: true
          runAsUser: 100
          capabilities:
            drop:
              - ALL
        command:
        - /bin/sh
        - -c
        - |
          cat > /vault/config/vault.hcl << EOF
          storage "file" {
            path = "/vault/file"
          }
          listener "tcp" {
            address = "0.0.0.0:8200"
            tls_disable = 1
            cluster_address = "0.0.0.0:8201"
          }
          api_addr = "http://0.0.0.0:8200"
          cluster_addr = "http://0.0.0.0:8201"
          ui = true
          disable_mlock = true
          EOF
        volumeMounts:
        - name: vault-config
          mountPath: /vault/config
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "200m"
            memory: "256Mi"
      containers:
      - name: vault
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        securityContext:
          runAsNonRoot: true
          runAsUser: 100
          capabilities:
            drop:
              - ALL
        ports:
        - name: http
          containerPort: 8200
          protocol: TCP
        - name: cluster
          containerPort: 8201
          protocol: TCP
        command:
        - vault
        args:
        - server
        - -config=/vault/config/vault.hcl
        env:
        - name: VAULT_API_ADDR
          value: "http://0.0.0.0:8200"
        - name: VAULT_CLUSTER_ADDR
          value: "http://0.0.0.0:8201"
        - name: VAULT_LOG_LEVEL
          value: "debug"
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: VAULT_TOKEN
          valueFrom:
            secretKeyRef:
              name: vault-keys
              key: root-token
        volumeMounts:
        - name: vault-config
          mountPath: /vault/config
        - name: tools-bin
          mountPath: /usr/local/bin
        - name: vault-data
          mountPath: /vault/data
        - name: vault-token
          mountPath: /home/vault/.vault-token
        - name: vault-init-script
          mountPath: /scripts
        lifecycle:
          postStart:
            exec:
              command:
              - /bin/sh
              - -c
              - |
                export VAULT_ADDR=http://127.0.0.1:8200
                export VAULT_SKIP_VERIFY=true
                until vault status -tls-skip-verify >/dev/null 2>&1; do
                  echo "Waiting for Vault to start..."
                  sleep 2
                done
                
                # Initialize Vault if needed
                if ! vault status -format=json 2>/dev/null | grep -q '"initialized":true'; then
                  echo "Initializing Vault..."
                  vault operator init -key-shares=1 -key-threshold=1 -format=json > /tmp/vault-init.json
                  
                  # Store keys in Kubernetes secret
                  UNSEAL_KEY=$(jq -r '.unseal_keys_b64[0]' /tmp/vault-init.json)
                  ROOT_TOKEN=$(jq -r '.root_token' /tmp/vault-init.json)
                  
                  kubectl create secret generic vault-keys \
                    --from-literal=unseal-key="$UNSEAL_KEY" \
                    --from-literal=root-token="$ROOT_TOKEN" \
                    -n wrcbot
                fi
                
                # Unseal if needed
                if vault status -format=json 2>/dev/null | grep -q '"sealed":true'; then
                  echo "Unsealing Vault..."
                  UNSEAL_KEY=$(kubectl get secret -n wrcbot vault-keys -o jsonpath='{.data.unseal-key}' | base64 -d)
                  vault operator unseal "$UNSEAL_KEY"
                fi
                
                # Run init script
                /scripts/init.sh
        readinessProbe:
          httpGet:
            path: /v1/sys/health?standbyok=true&sealedcode=200&uninitcode=200
            port: 8200
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /v1/sys/health?standbyok=true&sealedcode=200&uninitcode=200
            port: 8200
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 5
      volumes:
      - name: vault-storage
        persistentVolumeClaim:
          claimName: vault-pvc
      - name: vault-config
        emptyDir: {}
      - name: vault-init-script
        configMap:
          name: vault-init-script
          defaultMode: 0755
      - name: vault-token
        emptyDir:
          medium: Memory
      - name: tools-bin
        emptyDir: {}
      - name: vault-data
        emptyDir: {}