apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "wrcbot.fullname" . }}
  labels:
    {{- include "wrcbot.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "wrcbot.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "wrcbot.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if .Values.vault.enabled }}
      initContainers:
      - name: vault-secrets-init
        image: hashicorp/vault:1.15.2
        env:
        - name: VAULT_ADDR
          value: {{ .Values.bot.env.VAULT_ADDR | quote }}
        command:
        - /bin/sh
        - -c
        - |
          # Wait for Vault to be ready
          until vault status; do
            echo "Waiting for Vault to be ready..."
            sleep 5
          done
          
          # Get root token from Vault keys secret
          ROOT_TOKEN=$(kubectl get secret vault-keys -o jsonpath='{.data.root-token}' | base64 -d)
          export VAULT_TOKEN=$ROOT_TOKEN
          
          # Fetch latest secrets from Vault and update them to shared volume
          echo "Fetching secrets from Vault..."
          vault kv get -format=json {{ .Values.vault.secretPath }} | jq -r '.data.data' > /vault-secrets/secrets.json
          
          {{- range $vaultKey, $envKey := .Values.vault.secrets }}
          echo "$(cat /vault-secrets/secrets.json | jq -r '.{{ $vaultKey }}')" > /vault-secrets/{{ $vaultKey }}
          {{- end }}
          
          echo "Secrets refreshed successfully"
        volumeMounts:
        - name: vault-secrets
          mountPath: /vault-secrets
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          env:
            # Standard environment variables
            {{- range $key, $value := .Values.bot.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            # Vault secrets as environment variables from files
            {{- if .Values.vault.enabled }}
            {{- range $vaultKey, $envKey := .Values.vault.secrets }}
            - name: {{ $envKey }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "wrcbot.vaultSecretName" $ }}
                  key: {{ $vaultKey }}
            {{- end }}
            {{- end }}
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
          {{- if .Values.persistence.enabled }}
            - name: data
              mountPath: {{ .Values.persistence.mountPath }}
          {{- end }}
          {{- if .Values.vault.enabled }}
            - name: vault-secrets
              mountPath: /vault-secrets
              readOnly: true
          {{- end }}
      volumes:
      {{- if .Values.persistence.enabled }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "wrcbot.fullname" . }}-data
      {{- end }}
      {{- if .Values.vault.enabled }}
        - name: vault-secrets
          emptyDir: {}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
