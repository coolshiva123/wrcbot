apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "wrcbot.fullname" . }}
  labels:
    {{- include "wrcbot.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "wrcbot.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "wrcbot.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: wrcbot-sa
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        - name: config-volume
          emptyDir: {}
      initContainers:
        - name: vault-init
          image: curlimages/curl:8.7.1
          command:
            - sh
            - -c
            - >-
              set -x;
              echo "Starting vault-init container...";
              
              echo "Installing required packages...";
              apk add --no-cache jq;
              
              VAULT_ADDR="http://vault.wrcbot.svc.cluster.local:8200";
              SECRET_PATH="secret/wrcbot-config";
              ROLE="wrcbot-role";
              CONFIG_PATH="/config/config.py";
              
              echo "Waiting for Vault to be ready...";
              until curl -fs ${VAULT_ADDR}/v1/sys/health; do
                echo "Vault is not ready - sleeping 5s...";
                sleep 5;
              done;
              
              echo "Reading service account token...";
              if [ ! -f /var/run/secrets/kubernetes.io/serviceaccount/token ]; then
                echo "Error: Service account token file not found";
                ls -la /var/run/secrets/kubernetes.io/;
                exit 1;
              fi;
              
              JWT=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token);
              if [ -z "$JWT" ]; then
                echo "Error: Failed to read service account token";
                exit 1;
              fi;
              echo "Authenticating with Vault...";
              VAULT_LOGIN_RESPONSE=$(curl -v --fail --request POST \
                --data "{\"role\": \"${ROLE}\", \"jwt\": \"${JWT}\"}" \
                ${VAULT_ADDR}/v1/auth/kubernetes/login 2>&1);
              LOGIN_STATUS=$?;
              echo "Vault login response: $VAULT_LOGIN_RESPONSE";
              
              if [ $LOGIN_STATUS -ne 0 ]; then
                echo "Error: Failed to authenticate with Vault. Status: $LOGIN_STATUS";
                echo "Full response: $VAULT_LOGIN_RESPONSE";
                exit 1;
              fi;
              
              VAULT_TOKEN=$(echo "$VAULT_LOGIN_RESPONSE" | grep -o '"client_token":"[^"]*' | cut -d'"' -f4);
              if [ -z "$VAULT_TOKEN" ]; then
                echo "Error: Failed to extract Vault token from response";
                echo "Full response: $VAULT_LOGIN_RESPONSE";
                exit 1;
              fi;
              echo "Fetching secret from Vault...";
              SECRET_JSON=$(curl -v --fail \
                --header "X-Vault-Token: ${VAULT_TOKEN}" \
                ${VAULT_ADDR}/v1/${SECRET_PATH} 2>&1);
              SECRET_STATUS=$?;
              echo "Secret fetch response: $SECRET_JSON";
              
              if [ $SECRET_STATUS -ne 0 ]; then
                echo "Error: Failed to fetch secret from Vault. Status: $SECRET_STATUS";
                echo "Full response: $SECRET_JSON";
                exit 1;
              fi;
              
              # Try to extract config using different approaches
              CONFIG=$(echo "$SECRET_JSON" | jq -r '.data.config // empty');
              if [ -z "$CONFIG" ]; then
                echo "Trying alternate data path...";
                CONFIG=$(echo "$SECRET_JSON" | jq -r '.data // empty');
              fi;
              
              if [ -z "$CONFIG" ]; then
                echo "Error: Failed to extract config from secret";
                echo "Raw secret JSON:";
                echo "$SECRET_JSON" | jq '.';
                exit 1;
              fi;
              echo "Generating config.py...";
              echo 'BACKEND="SlackV3"' > $CONFIG_PATH;
              echo 'BOT_DATA_DIR = "/errbot/data"' >> $CONFIG_PATH;
              echo 'BOT_EXTRA_PLUGIN_DIR = "/errbot/src/plugins"' >> $CONFIG_PATH;
              echo 'BOT_LOG_FILE = "/errbot/errbot.log"' >> $CONFIG_PATH;
              echo 'BOT_EXTRA_BACKEND_DIR = "/opt/errbot/backend"' >> $CONFIG_PATH;
              echo 'BOT_LOG_LEVEL = "DEBUG"' >> $CONFIG_PATH;
              echo "BOT_ADMINS = $(echo "$CONFIG" | jq '.BOT_ADMINS')" >> $CONFIG_PATH;
              echo "BOT_IDENTITY = $(echo "$CONFIG" | jq '.BOT_IDENTITY')" >> $CONFIG_PATH;
              echo "BOT_PREFIX = '$(echo "$CONFIG" | jq -r '.BOT_PREFIX')'" >> $CONFIG_PATH;
              echo "Config file successfully created!";
          volumeMounts:
            - name: config-volume
              mountPath: /config
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.bot.overrideCommand }}
          command:
            {{- toYaml .Values.bot.overrideCommand | nindent 12 }}
          {{- end }}
          {{- if .Values.bot.overrideArgs }}
          args:
            {{- toYaml .Values.bot.overrideArgs | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          env:
            # Standard environment variables
            {{- range $key, $value := .Values.bot.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          volumeMounts:
            - name: config-volume
              mountPath: /errbot/src/config.py
              subPath: config.py
          {{- if not .Values.bot.disableHealthChecks }}
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
