apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "wrcbot.fullname" . }}
  labels:
    {{- include "wrcbot.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "wrcbot.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        vault.hashicorp.com/agent-inject: 'true'
        vault.hashicorp.com/agent-inject-status: 'update'
        vault.hashicorp.com/role: 'wrcbot-role'
        vault.hashicorp.com/namespace: '{{ .Release.Namespace }}'
        vault.hashicorp.com/auth-path: 'auth/kubernetes'
        # Config.py template
        vault.hashicorp.com/agent-inject-secret-config.py: 'secret/wrcbot-config'
        vault.hashicorp.com/agent-inject-file-config.py: '/vault/secrets/vault/secrets/config.py'
        vault.hashicorp.com/agent-inject-template-config.py: |
          {{`# This config file is generated by Vault
          BACKEND = 'SlackV3'
          BOT_DATA_DIR = '/errbot/data'
          BOT_EXTRA_PLUGIN_DIR = '/errbot/src/plugins'
          BOT_LOG_FILE = '/errbot/errbot.log'
          BOT_EXTRA_BACKEND_DIR = '/opt/errbot/backend'
          BOT_LOG_LEVEL = 'DEBUG'

          {{ with secret "secret/wrcbot-config" }}
          {{ $config := .Data.config | parseJSON }}
          # Bot admins list from Vault
          BOT_ADMINS = {{ $config.BOT_ADMINS }}

          # Bot identity configuration from Vault
          BOT_IDENTITY = {{ $config.BOT_IDENTITY | toJSON }}

          # Bot prefix from Vault
          BOT_PREFIX = '{{ $config.BOT_PREFIX }}'
          {{ end }}`}}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "wrcbot.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: wrcbot-sa
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              echo "=== Debug: Directory Structure ===" > /errbot/config_py_content.txt
              ls -R /vault/secrets/ >> /errbot/config_py_content.txt
              
              echo -e "\n=== Debug: Config Files ===" >> /errbot/config_py_content.txt
              echo "Original config.py exists: $([ -f /errbot/src/config.py ] && echo 'yes' || echo 'no')" >> /errbot/config_py_content.txt
              echo "Vault config.py exists: $([ -f /vault/secrets/vault/secrets/config.py ] && echo 'yes' || echo 'no')" >> /errbot/config_py_content.txt
              
              echo -e "\n=== Debug: Vault Config Structure ===" >> /errbot/config_py_content.txt
              echo "Lines in Vault config:" >> /errbot/config_py_content.txt
              wc -l /vault/secrets/vault/secrets/config.py >> /errbot/config_py_content.txt
              echo "Variables defined in Vault config:" >> /errbot/config_py_content.txt
              grep "^[A-Z]" /vault/secrets/vault/secrets/config.py | cut -d= -f1 >> /errbot/config_py_content.txt
              
              echo "Copying Vault config.py..."
              cp /vault/secrets/vault/secrets/config.py /errbot/src/config.py
              
              echo -e "\n=== Debug: Config Verification ===" >> /errbot/config_py_content.txt
              cd /errbot/src
              
              # Try to safely load and validate the config
              python3 -c '
import config
print("=== Config Variables ===")
print("BOT_ADMINS type:", type(config.BOT_ADMINS) if hasattr(config, "BOT_ADMINS") else "not found")
print("BOT_IDENTITY type:", type(config.BOT_IDENTITY) if hasattr(config, "BOT_IDENTITY") else "not found")
print("BOT_PREFIX type:", type(config.BOT_PREFIX) if hasattr(config, "BOT_PREFIX") else "not found")
print("\n=== Validation ===")
print("BOT_ADMINS is tuple:", isinstance(config.BOT_ADMINS, tuple) if hasattr(config, "BOT_ADMINS") else False)
print("BOT_IDENTITY is dict:", isinstance(config.BOT_IDENTITY, dict) if hasattr(config, "BOT_IDENTITY") else False)
print("Required BOT_IDENTITY keys:", all(k in config.BOT_IDENTITY for k in ["token", "signing_secret", "app_token"]) if hasattr(config, "BOT_IDENTITY") else False)
print("BOT_PREFIX is str:", isinstance(config.BOT_PREFIX, str) if hasattr(config, "BOT_PREFIX") else False)
              ' >> /errbot/config_py_content.txt 2>&1
              
              echo "Checking if BOT_IDENTITY values are set..." >> /errbot/config_py_content.txt
              python3 -c "import config; print('token:', 'set' if config.BOT_IDENTITY.get('token') else 'not set'); print('signing_secret:', 'set' if config.BOT_IDENTITY.get('signing_secret') else 'not set'); print('app_token:', 'set' if config.BOT_IDENTITY.get('app_token') else 'not set')" >> /errbot/config_py_content.txt
              
              echo "Checking if BOT_PREFIX is set..." >> /errbot/config_py_content.txt
              python3 -c "import config; print('BOT_PREFIX:', 'configured' if hasattr(config, 'BOT_PREFIX') and config.BOT_PREFIX else 'not configured')" >> /errbot/config_py_content.txt
              
              echo "Current time: $(date)" >> /errbot/config_py_content.txt
              
              echo "Files ready for inspection. Sleeping..."
              sleep infinity
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          env:
            {{- range $key, $value := .Values.bot.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          {{- if not .Values.bot.disableHealthChecks }}
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
