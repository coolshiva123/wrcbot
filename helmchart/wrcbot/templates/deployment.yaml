apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "wrcbot.fullname" . }}
  labels:
    {{- include "wrcbot.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "wrcbot.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "wrcbot.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: wrcbot-sa
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        - name: config-volume
          emptyDir: {}
      initContainers:
        - name: vault-init
          image: curlimages/curl:8.7.1
          command:
            - sh
            - -c
            - >-
              set -e;
              apk add --no-cache jq;
              VAULT_ADDR="http://vault:8200";
              SECRET_PATH="secret/wrcbot-config";
              ROLE="wrcbot-role";
              CONFIG_PATH="/config/config.py";
              echo "Reading service account token...";
              JWT=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token);
              if [ -z "$JWT" ]; then
                echo "Error: Failed to read service account token";
                exit 1;
              fi;
              echo "Authenticating with Vault...";
              VAULT_LOGIN_RESPONSE=$(curl -s --fail --request POST --data "{\"role\": \"${ROLE}\", \"jwt\": \"${JWT}\"}" ${VAULT_ADDR}/v1/auth/kubernetes/login);
              if [ $? -ne 0 ]; then
                echo "Error: Failed to authenticate with Vault";
                exit 1;
              fi;
              VAULT_TOKEN=$(echo "$VAULT_LOGIN_RESPONSE" | jq -r .auth.client_token);
              if [ -z "$VAULT_TOKEN" ] || [ "$VAULT_TOKEN" = "null" ]; then
                echo "Error: Failed to extract Vault token from response";
                exit 1;
              fi;
              echo "Fetching secret from Vault...";
              SECRET_JSON=$(curl -s --fail --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${SECRET_PATH});
              if [ $? -ne 0 ]; then
                echo "Error: Failed to fetch secret from Vault";
                exit 1;
              fi;
              CONFIG=$(echo "$SECRET_JSON" | jq -r .data.config);
              if [ -z "$CONFIG" ] || [ "$CONFIG" = "null" ]; then
                echo "Error: Failed to extract config from secret";
                exit 1;
              fi;
              echo "Generating config.py...";
              echo 'BACKEND="SlackV3"' > $CONFIG_PATH;
              echo 'BOT_DATA_DIR = "/errbot/data"' >> $CONFIG_PATH;
              echo 'BOT_EXTRA_PLUGIN_DIR = "/errbot/src/plugins"' >> $CONFIG_PATH;
              echo 'BOT_LOG_FILE = "/errbot/errbot.log"' >> $CONFIG_PATH;
              echo 'BOT_EXTRA_BACKEND_DIR = "/opt/errbot/backend"' >> $CONFIG_PATH;
              echo 'BOT_LOG_LEVEL = "DEBUG"' >> $CONFIG_PATH;
              echo "BOT_ADMINS = $(echo "$CONFIG" | jq '.BOT_ADMINS')" >> $CONFIG_PATH;
              echo "BOT_IDENTITY = $(echo "$CONFIG" | jq '.BOT_IDENTITY')" >> $CONFIG_PATH;
              echo "BOT_PREFIX = '$(echo "$CONFIG" | jq -r '.BOT_PREFIX')'" >> $CONFIG_PATH;
              echo "Config file successfully created!";
          volumeMounts:
            - name: config-volume
              mountPath: /config
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.bot.overrideCommand }}
          command:
            {{- toYaml .Values.bot.overrideCommand | nindent 12 }}
          {{- end }}
          {{- if .Values.bot.overrideArgs }}
          args:
            {{- toYaml .Values.bot.overrideArgs | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          env:
            # Standard environment variables
            {{- range $key, $value := .Values.bot.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          volumeMounts:
            - name: config-volume
              mountPath: /errbot/src/config.py
              subPath: config.py
          {{- if not .Values.bot.disableHealthChecks }}
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
