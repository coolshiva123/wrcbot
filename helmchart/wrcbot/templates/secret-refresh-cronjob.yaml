{{- if .Values.vault.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "wrcbot.fullname" . }}-secret-refresh
  labels:
    {{- include "wrcbot.labels" . | nindent 4 }}
spec:
  schedule: "*/30 * * * *"  # Run every 30 minutes
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: secret-refresh
            image: hashicorp/vault:1.15.2
            env:
            - name: VAULT_ADDR
              value: {{ .Values.bot.env.VAULT_ADDR | quote }}
            command:
            - /bin/sh
            - -c
            - |
              # Get root token from Vault keys secret
              ROOT_TOKEN=$(kubectl get secret vault-keys -o jsonpath='{.data.root-token}' | base64 -d)
              export VAULT_TOKEN=$ROOT_TOKEN
              
              # Check if Vault is accessible
              if ! vault status; then
                echo "Vault is not accessible, skipping secret refresh"
                exit 0
              fi
              
              # Fetch secrets from Vault and update Kubernetes secret
              echo "Refreshing secrets from Vault..."
              vault kv get -format=json {{ .Values.vault.secretPath }} | jq -r '.data.data' > /tmp/secrets.json
              
              # Update the Kubernetes secret
              kubectl create secret generic {{ include "wrcbot.vaultSecretName" $ }} \
                {{- range $vaultKey, $envKey := .Values.vault.secrets }}
                --from-literal={{ $vaultKey }}="$(cat /tmp/secrets.json | jq -r '.{{ $vaultKey }}')" \
                {{- end }}
                --namespace={{ .Release.Namespace }} \
                --dry-run=client -o yaml | kubectl apply -f -
              
              echo "Secrets refreshed successfully at $(date)"
          serviceAccountName: {{ include "wrcbot.fullname" . }}-vault
{{- end }}
