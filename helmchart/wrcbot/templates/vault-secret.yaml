{{- if .Values.vault.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "wrcbot.vaultSecretName" . }}
  labels:
    {{- include "wrcbot.labels" . | nindent 4 }}
type: Opaque
data:
  # These will be populated by an init container or external secret operator
  # For now, we'll use placeholders that will be replaced by Vault values
  {{- range $vaultKey, $envKey := .Values.vault.secrets }}
  {{ $vaultKey }}: {{ "changeme" | b64enc }}
  {{- end }}
---
# Job to populate Vault secrets
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "wrcbot.fullname" . }}-vault-secrets-{{ .Release.Revision }}
  labels:
    {{- include "wrcbot.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      name: {{ include "wrcbot.fullname" . }}-vault-secrets
    spec:
      restartPolicy: OnFailure
      containers:
      - name: vault-secrets
        image: hashicorp/vault:1.15.2
        env:
        - name: VAULT_ADDR
          value: {{ .Values.bot.env.VAULT_ADDR | quote }}
        command:
        - /bin/sh
        - -c
        - |
          # Wait for Vault to be ready
          until vault status; do
            echo "Waiting for Vault to be ready..."
            sleep 5
          done
          
          # Get root token from Vault keys secret
          ROOT_TOKEN=$(kubectl get secret vault-keys -o jsonpath='{.data.root-token}' | base64 -d)
          export VAULT_TOKEN=$ROOT_TOKEN
          
          # Check if secrets already exist
          if vault kv get {{ .Values.vault.secretPath }} >/dev/null 2>&1; then
            echo "Secrets already exist in Vault"
          else
            echo "Creating default secrets in Vault..."
            # Create default secrets (these should be updated with real values)
            vault kv put {{ .Values.vault.secretPath }} \
              {{- range $vaultKey, $envKey := .Values.vault.secrets }}
              {{ $vaultKey }}="changeme-{{ $vaultKey }}" \
              {{- end }}
          fi
          
          # Fetch secrets from Vault and update Kubernetes secret
          vault kv get -format=json {{ .Values.vault.secretPath }} | jq -r '.data.data' > /tmp/secrets.json
          
          # Create/update the Kubernetes secret
          kubectl create secret generic {{ include "wrcbot.vaultSecretName" $ }} \
            {{- range $vaultKey, $envKey := .Values.vault.secrets }}
            --from-literal={{ $vaultKey }}="$(cat /tmp/secrets.json | jq -r '.{{ $vaultKey }}')" \
            {{- end }}
            --namespace={{ .Release.Namespace }} \
            --dry-run=client -o yaml | kubectl apply -f -
          
          echo "Vault secrets updated successfully"
      serviceAccountName: {{ include "wrcbot.fullname" . }}-vault
{{- end }}
